/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.13.4.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
export declare type MintRule = "by_keys" | {
    by_minter: string;
} | {
    by_key: string;
};
export interface BadgeResponse {
    current_supply: number;
    expiry?: number | null;
    id: number;
    manager: string;
    max_supply?: number | null;
    metadata: Metadata;
    rule: MintRule;
    transferrable: boolean;
    [k: string]: unknown;
}
export interface Metadata {
    animation_url?: string | null;
    attributes?: Trait[] | null;
    background_color?: string | null;
    description?: string | null;
    external_url?: string | null;
    image?: string | null;
    image_data?: string | null;
    name?: string | null;
    youtube_url?: string | null;
    [k: string]: unknown;
}
export interface Trait {
    display_type?: string | null;
    trait_type: string;
    value: string;
    [k: string]: unknown;
}
export interface BadgesResponse {
    badges: BadgeResponse[];
    [k: string]: unknown;
}
export declare type Decimal = string;
export interface ConfigResponse {
    badge_count: number;
    developer: string;
    fee_per_byte: Decimal;
    nft: string;
    [k: string]: unknown;
}
export declare type ExecuteMsg = {
    create_badge: {
        expiry?: number | null;
        manager: string;
        max_supply?: number | null;
        metadata: Metadata;
        rule: MintRule;
        transferrable: boolean;
        [k: string]: unknown;
    };
} | {
    edit_badge: {
        id: number;
        metadata: Metadata;
        [k: string]: unknown;
    };
} | {
    add_keys: {
        id: number;
        keys: string[];
        [k: string]: unknown;
    };
} | {
    purge_keys: {
        id: number;
        limit?: number | null;
        [k: string]: unknown;
    };
} | {
    purge_owners: {
        id: number;
        limit?: number | null;
        [k: string]: unknown;
    };
} | {
    mint_by_minter: {
        id: number;
        owners: string[];
        [k: string]: unknown;
    };
} | {
    mint_by_key: {
        id: number;
        owner: string;
        signature: string;
        [k: string]: unknown;
    };
} | {
    mint_by_keys: {
        id: number;
        owner: string;
        pubkey: string;
        signature: string;
        [k: string]: unknown;
    };
} | {
    set_nft: {
        nft: string;
        [k: string]: unknown;
    };
};
export interface InstantiateMsg {
    fee_per_byte: Decimal;
    [k: string]: unknown;
}
export interface KeyResponse {
    key: string;
    whitelisted: boolean;
    [k: string]: unknown;
}
export interface KeysResponse {
    keys: string[];
    [k: string]: unknown;
}
export interface OwnerResponse {
    claimed: boolean;
    user: string;
    [k: string]: unknown;
}
export interface OwnersResponse {
    owners: string[];
    [k: string]: unknown;
}
export declare type QueryMsg = {
    config: {
        [k: string]: unknown;
    };
} | {
    badge: {
        id: number;
        [k: string]: unknown;
    };
} | {
    badges: {
        limit?: number | null;
        start_after?: number | null;
        [k: string]: unknown;
    };
} | {
    key: {
        id: number;
        pubkey: string;
        [k: string]: unknown;
    };
} | {
    keys: {
        id: number;
        limit?: number | null;
        start_after?: string | null;
        [k: string]: unknown;
    };
} | {
    owner: {
        id: number;
        user: string;
        [k: string]: unknown;
    };
} | {
    owners: {
        id: number;
        limit?: number | null;
        start_after?: string | null;
        [k: string]: unknown;
    };
};
