/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.13.4.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForMetadata, Metadata, Trait, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, Decimal, CollectionInfoResponse, RoyaltyInfoResponse, ContractInfoResponse, ExecuteMsg, Binary, MintMsgForNullable_Empty, Empty, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsg, TokensResponse } from "./Nft.types";
import { NftQueryClient, NftClient } from "./Nft.client";
export const nftQueryKeys = {
  contract: ([{
    contract: "nft"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...nftQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  ownerOf: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "owner_of",
    args
  }] as const),
  approval: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "approval",
    args
  }] as const),
  approvals: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "approvals",
    args
  }] as const),
  allOperators: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "all_operators",
    args
  }] as const),
  numTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "num_tokens",
    args
  }] as const),
  contractInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "contract_info",
    args
  }] as const),
  nftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "nft_info",
    args
  }] as const),
  allNftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "all_nft_info",
    args
  }] as const),
  tokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "tokens",
    args
  }] as const),
  allTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "all_tokens",
    args
  }] as const),
  minter: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "minter",
    args
  }] as const),
  collectionInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nftQueryKeys.address(contractAddress)[0],
    method: "collection_info",
    args
  }] as const)
};
export interface NftReactQuery<TResponse, TData = TResponse> {
  client: NftQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface NftCollectionInfoQuery<TData> extends NftReactQuery<CollectionInfoResponse, TData> {}
export function useNftCollectionInfoQuery<TData = CollectionInfoResponse>({
  client,
  options
}: NftCollectionInfoQuery<TData>) {
  return useQuery<CollectionInfoResponse, Error, TData>(nftQueryKeys.collectionInfo(client?.contractAddress), () => client ? client.collectionInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftMinterQuery<TData> extends NftReactQuery<MinterResponse, TData> {}
export function useNftMinterQuery<TData = MinterResponse>({
  client,
  options
}: NftMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(nftQueryKeys.minter(client?.contractAddress), () => client ? client.minter() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftAllTokensQuery<TData> extends NftReactQuery<AllTokensResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useNftAllTokensQuery<TData = AllTokensResponse>({
  client,
  args,
  options
}: NftAllTokensQuery<TData>) {
  return useQuery<AllTokensResponse, Error, TData>(nftQueryKeys.allTokens(client?.contractAddress, args), () => client ? client.allTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftTokensQuery<TData> extends NftReactQuery<TokensResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useNftTokensQuery<TData = TokensResponse>({
  client,
  args,
  options
}: NftTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(nftQueryKeys.tokens(client?.contractAddress, args), () => client ? client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftAllNftInfoQuery<TData> extends NftReactQuery<AllNftInfoResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useNftAllNftInfoQuery<TData = AllNftInfoResponse>({
  client,
  args,
  options
}: NftAllNftInfoQuery<TData>) {
  return useQuery<AllNftInfoResponse, Error, TData>(nftQueryKeys.allNftInfo(client?.contractAddress, args), () => client ? client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftNftInfoQuery<TData> extends NftReactQuery<NftInfoResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function useNftNftInfoQuery<TData = NftInfoResponse>({
  client,
  args,
  options
}: NftNftInfoQuery<TData>) {
  return useQuery<NftInfoResponse, Error, TData>(nftQueryKeys.nftInfo(client?.contractAddress, args), () => client ? client.nftInfo({
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftContractInfoQuery<TData> extends NftReactQuery<ContractInfoResponse, TData> {}
export function useNftContractInfoQuery<TData = ContractInfoResponse>({
  client,
  options
}: NftContractInfoQuery<TData>) {
  return useQuery<ContractInfoResponse, Error, TData>(nftQueryKeys.contractInfo(client?.contractAddress), () => client ? client.contractInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftNumTokensQuery<TData> extends NftReactQuery<NumTokensResponse, TData> {}
export function useNftNumTokensQuery<TData = NumTokensResponse>({
  client,
  options
}: NftNumTokensQuery<TData>) {
  return useQuery<NumTokensResponse, Error, TData>(nftQueryKeys.numTokens(client?.contractAddress), () => client ? client.numTokens() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftAllOperatorsQuery<TData> extends NftReactQuery<AllOperatorsResponse, TData> {
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useNftAllOperatorsQuery<TData = AllOperatorsResponse>({
  client,
  args,
  options
}: NftAllOperatorsQuery<TData>) {
  return useQuery<AllOperatorsResponse, Error, TData>(nftQueryKeys.allOperators(client?.contractAddress, args), () => client ? client.allOperators({
    includeExpired: args.includeExpired,
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftApprovalsQuery<TData> extends NftReactQuery<ApprovalsResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useNftApprovalsQuery<TData = ApprovalsResponse>({
  client,
  args,
  options
}: NftApprovalsQuery<TData>) {
  return useQuery<ApprovalsResponse, Error, TData>(nftQueryKeys.approvals(client?.contractAddress, args), () => client ? client.approvals({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftApprovalQuery<TData> extends NftReactQuery<ApprovalResponse, TData> {
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function useNftApprovalQuery<TData = ApprovalResponse>({
  client,
  args,
  options
}: NftApprovalQuery<TData>) {
  return useQuery<ApprovalResponse, Error, TData>(nftQueryKeys.approval(client?.contractAddress, args), () => client ? client.approval({
    includeExpired: args.includeExpired,
    spender: args.spender,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftOwnerOfQuery<TData> extends NftReactQuery<OwnerOfResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useNftOwnerOfQuery<TData = OwnerOfResponse>({
  client,
  args,
  options
}: NftOwnerOfQuery<TData>) {
  return useQuery<OwnerOfResponse, Error, TData>(nftQueryKeys.ownerOf(client?.contractAddress, args), () => client ? client.ownerOf({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NftBurnMutation {
  client: NftClient;
  msg: {
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useNftBurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NftBurnMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, NftBurnMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burn(msg, fee, memo, funds), options);
}
export interface NftMintMutation {
  client: NftClient;
  msg: MintMsgForNullable_Empty;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useNftMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NftMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, NftMintMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(msg, fee, memo, funds), options);
}
export interface NftRevokeAllMutation {
  client: NftClient;
  msg: {
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useNftRevokeAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NftRevokeAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, NftRevokeAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revokeAll(msg, fee, memo, funds), options);
}
export interface NftApproveAllMutation {
  client: NftClient;
  msg: {
    expires?: Expiration;
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useNftApproveAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NftApproveAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, NftApproveAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approveAll(msg, fee, memo, funds), options);
}
export interface NftRevokeMutation {
  client: NftClient;
  msg: {
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useNftRevokeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NftRevokeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, NftRevokeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revoke(msg, fee, memo, funds), options);
}
export interface NftApproveMutation {
  client: NftClient;
  msg: {
    expires?: Expiration;
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useNftApproveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NftApproveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, NftApproveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approve(msg, fee, memo, funds), options);
}
export interface NftSendNftMutation {
  client: NftClient;
  msg: {
    contract: string;
    msg: Binary;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useNftSendNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NftSendNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, NftSendNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.sendNft(msg, fee, memo, funds), options);
}
export interface NftTransferNftMutation {
  client: NftClient;
  msg: {
    recipient: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useNftTransferNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NftTransferNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, NftTransferNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transferNft(msg, fee, memo, funds), options);
}
export interface NftReadyMutation {
  client: NftClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useNftReadyMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NftReadyMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, NftReadyMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.ready(fee, memo, funds), options);
}