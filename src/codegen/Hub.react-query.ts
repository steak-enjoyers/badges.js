/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.13.4.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { MintRule, BadgeResponse, Metadata, Trait, BadgesResponse, Decimal, ConfigResponse, ExecuteMsg, InstantiateMsg, KeyResponse, KeysResponse, OwnerResponse, OwnersResponse, QueryMsg } from "./Hub.types";
import { HubQueryClient, HubClient } from "./Hub.client";
export const hubQueryKeys = {
  contract: ([{
    contract: "hub"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...hubQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...hubQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  badge: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...hubQueryKeys.address(contractAddress)[0],
    method: "badge",
    args
  }] as const),
  badges: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...hubQueryKeys.address(contractAddress)[0],
    method: "badges",
    args
  }] as const),
  key: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...hubQueryKeys.address(contractAddress)[0],
    method: "key",
    args
  }] as const),
  keys: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...hubQueryKeys.address(contractAddress)[0],
    method: "keys",
    args
  }] as const),
  owner: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...hubQueryKeys.address(contractAddress)[0],
    method: "owner",
    args
  }] as const),
  owners: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...hubQueryKeys.address(contractAddress)[0],
    method: "owners",
    args
  }] as const)
};
export interface HubReactQuery<TResponse, TData = TResponse> {
  client: HubQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface HubOwnersQuery<TData> extends HubReactQuery<OwnersResponse, TData> {
  args: {
    id: number;
    limit?: number;
    startAfter?: string;
  };
}
export function useHubOwnersQuery<TData = OwnersResponse>({
  client,
  args,
  options
}: HubOwnersQuery<TData>) {
  return useQuery<OwnersResponse, Error, TData>(hubQueryKeys.owners(client?.contractAddress, args), () => client ? client.owners({
    id: args.id,
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface HubOwnerQuery<TData> extends HubReactQuery<OwnerResponse, TData> {
  args: {
    id: number;
    user: string;
  };
}
export function useHubOwnerQuery<TData = OwnerResponse>({
  client,
  args,
  options
}: HubOwnerQuery<TData>) {
  return useQuery<OwnerResponse, Error, TData>(hubQueryKeys.owner(client?.contractAddress, args), () => client ? client.owner({
    id: args.id,
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface HubKeysQuery<TData> extends HubReactQuery<KeysResponse, TData> {
  args: {
    id: number;
    limit?: number;
    startAfter?: string;
  };
}
export function useHubKeysQuery<TData = KeysResponse>({
  client,
  args,
  options
}: HubKeysQuery<TData>) {
  return useQuery<KeysResponse, Error, TData>(hubQueryKeys.keys(client?.contractAddress, args), () => client ? client.keys({
    id: args.id,
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface HubKeyQuery<TData> extends HubReactQuery<KeyResponse, TData> {
  args: {
    id: number;
    pubkey: string;
  };
}
export function useHubKeyQuery<TData = KeyResponse>({
  client,
  args,
  options
}: HubKeyQuery<TData>) {
  return useQuery<KeyResponse, Error, TData>(hubQueryKeys.key(client?.contractAddress, args), () => client ? client.key({
    id: args.id,
    pubkey: args.pubkey
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface HubBadgesQuery<TData> extends HubReactQuery<BadgesResponse, TData> {
  args: {
    limit?: number;
    startAfter?: number;
  };
}
export function useHubBadgesQuery<TData = BadgesResponse>({
  client,
  args,
  options
}: HubBadgesQuery<TData>) {
  return useQuery<BadgesResponse, Error, TData>(hubQueryKeys.badges(client?.contractAddress, args), () => client ? client.badges({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface HubBadgeQuery<TData> extends HubReactQuery<BadgeResponse, TData> {
  args: {
    id: number;
  };
}
export function useHubBadgeQuery<TData = BadgeResponse>({
  client,
  args,
  options
}: HubBadgeQuery<TData>) {
  return useQuery<BadgeResponse, Error, TData>(hubQueryKeys.badge(client?.contractAddress, args), () => client ? client.badge({
    id: args.id
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface HubConfigQuery<TData> extends HubReactQuery<ConfigResponse, TData> {}
export function useHubConfigQuery<TData = ConfigResponse>({
  client,
  options
}: HubConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(hubQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface HubSetNftMutation {
  client: HubClient;
  msg: {
    nft: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubSetNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubSetNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubSetNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setNft(msg, fee, memo, funds), options);
}
export interface HubMintByKeysMutation {
  client: HubClient;
  msg: {
    id: number;
    owner: string;
    pubkey: string;
    signature: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubMintByKeysMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubMintByKeysMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubMintByKeysMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintByKeys(msg, fee, memo, funds), options);
}
export interface HubMintByKeyMutation {
  client: HubClient;
  msg: {
    id: number;
    owner: string;
    signature: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubMintByKeyMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubMintByKeyMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubMintByKeyMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintByKey(msg, fee, memo, funds), options);
}
export interface HubMintByMinterMutation {
  client: HubClient;
  msg: {
    id: number;
    owners: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubMintByMinterMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubMintByMinterMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubMintByMinterMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintByMinter(msg, fee, memo, funds), options);
}
export interface HubPurgeOwnersMutation {
  client: HubClient;
  msg: {
    id: number;
    limit?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubPurgeOwnersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubPurgeOwnersMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubPurgeOwnersMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.purgeOwners(msg, fee, memo, funds), options);
}
export interface HubPurgeKeysMutation {
  client: HubClient;
  msg: {
    id: number;
    limit?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubPurgeKeysMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubPurgeKeysMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubPurgeKeysMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.purgeKeys(msg, fee, memo, funds), options);
}
export interface HubAddKeysMutation {
  client: HubClient;
  msg: {
    id: number;
    keys: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubAddKeysMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubAddKeysMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubAddKeysMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addKeys(msg, fee, memo, funds), options);
}
export interface HubEditBadgeMutation {
  client: HubClient;
  msg: {
    id: number;
    metadata: Metadata;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubEditBadgeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubEditBadgeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubEditBadgeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.editBadge(msg, fee, memo, funds), options);
}
export interface HubCreateBadgeMutation {
  client: HubClient;
  msg: {
    expiry?: number;
    manager: string;
    maxSupply?: number;
    metadata: Metadata;
    rule: MintRule;
    transferrable: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubCreateBadgeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubCreateBadgeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubCreateBadgeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createBadge(msg, fee, memo, funds), options);
}